<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:jee="http://www.springframework.org/schema/jee"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
	 http://www.springframework.org/schema/jee
        http://www.springframework.org/schema/jee/spring-jee.xsd">
 
 	<!-- It register the beans in context and scan the annotations inside beans and activate them -->
    <context:component-scan base-package="com.mng.demo" />
    
    <!-- This allow for dispatching requests to Controllers by registering 
    	 two beans - DefaultAnnotationHandlerMapping and AnnotationMethodHandlerAdapter -->
    <mvc:annotation-driven />
     
    <!-- This helps in mapping the logical view names to directly view files under a certain pre-configured directory -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp" />
    </bean>
     
    <!-- This resolves messages from resource bundles for different locales --> 
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="messages" />
    </bean>
    
    <!-- To validate the posted add employee form -->
    <!--  <bean id="employeeValidator" class="com.mng.demo.validator.EmployeeValidator" />
    <bean id="deptValidator" class="com.mng.demo.validator.DeptValidator" /> -->
    
    <!-- This produces a container-managed EntityManagerFactory; 
    	 rather than application-managed EntityManagerFactory as in case of LocalEntityManagerFactoryBean-->
    <bean id="entityManagerFactoryBean1" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
      <!--   <property name="dataSource" ref="dataSource" /> -->
      <property name="jtaDataSource" ref="dataSource1" />
      <property name="persistenceUnitName" value="entityManagerFactoryBean1" />
      
      <!-- This makes /META-INF/persistence.xml is no longer necessary -->
      <property name="packagesToScan" value="com.mng.demo.model" />
      <!-- JpaVendorAdapter implementation for Hibernate EntityManager.
      	   Exposes Hibernate's persistence provider and EntityManager extension interface -->
      <property name="jpaVendorAdapter">
         <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
      </property>
      <property name="jpaProperties">
         <props>
            <prop key="hibernate.hbm2ddl.auto">create</prop>
            <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
            <prop key="hibernate.transaction.jta.platform">org.hibernate.service.jta.platform.internal.JBossAppServerJtaPlatform</prop>
         </props>
      </property>
   </bean>
   
   <bean id="entityManagerFactoryBean2" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
      <!--   <property name="dataSource" ref="dataSource" /> -->
      <property name="jtaDataSource" ref="dataSource2" />
      <property name="persistenceUnitName" value="entityManagerFactoryBean2" />
      <!-- This makes /META-INF/persistence.xml is no longer necessary -->
      <property name="packagesToScan" value="com.mng.demo.model" />
      <!-- JpaVendorAdapter implementation for Hibernate EntityManager.
      	   Exposes Hibernate's persistence provider and EntityManager extension interface -->
      <property name="jpaVendorAdapter">
         <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
      </property>
      <property name="jpaProperties">
         <props>
            <prop key="hibernate.hbm2ddl.auto">create</prop>
            <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
            <prop key="hibernate.transaction.jta.platform">org.hibernate.service.jta.platform.internal.JBossAppServerJtaPlatform</prop>
         </props>
      </property>
   </bean>
 
   <!-- Simple implementation of the standard JDBC DataSource interface, 
   		configuring the plain old JDBC DriverManager via bean properties -->
   <!--  <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
      <property name="driverClassName" value="com.mysql.jdbc.Driver" />
      <property name="url" value="jdbc:mysql://localhost:3306/hibernatedb" />
      <property name="username" value="root" />
      <property name="password" value="root" />
   </bean>  -->
    
    <!-- This transaction manager is appropriate for applications that use a single JPA EntityManagerFactory for transactional data access. 
    	JTA (usually through JtaTransactionManager) is necessary for accessing multiple transactional resources within the same transaction. -->
   <!--  <bean id="transactionManager1" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactoryBean" />
   </bean> -->
   
   
   <jee:jndi-lookup id="dataSource1" jndi-name="java:/hibernatedbds/ds1"/>
   <jee:jndi-lookup id="dataSource2" jndi-name="java:/hibernatedbds/ds2"/>
   
   <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager" >
   		<property name="transactionManagerName" value="java:jboss/TransactionManager" />
        <property name="userTransactionName" value="java:jboss/UserTransaction" />
   </bean>
	
	   
   <!-- responsible for registering the necessary Spring components that power annotation-driven transaction management; 
        such as when @Transactional methods are invoked -->
   <tx:annotation-driven transaction-manager="transactionManager"/>
   <!--  <tx:jta-transaction-manager />  -->
</beans>